#include "arduino_secrets.h"
          /*
  Sketch generated by the Arduino IoT Cloud Thing "Temperature and Humidity monitoring"
  https://create.arduino.cc/cloud/things/b03581ea-7134-40e3-92db-cffc33abfa0b

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String msg;
  CloudTemperatureSensor temperature;
  int pot;
  CloudRelativeHumidity humidity;
  CloudSchedule eveningTimer;
  CloudSchedule timer;
  bool fan;
  bool led;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "DHT.h"
#define DHTpin 2 // D4 on the nodemcu ESP8266
#define DHTTYPE DHT11
DHT dht(DHTpin, DHTTYPE);
const int heatLed = 14;
int motorLed = 5;
int potentiometerPin = A0;
int dashboardLed = 12;
int ledState = LOW;  // ledState used to set the LED
int buzzer  = 13;
int motorFan = 15;
int ledState1 = LOW; 
// Generally, the "unsigned long" should be used for variables that hold time
// The value will quickly become too large for an int to store
unsigned long previousMillis = 0;  // will store last time LED was updated
unsigned long previousMillis1 = 0;  // will store last time LED was updated

// constants won't change:
const long interval = 200;  // interval at which to blink (milliseconds)
void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();
  pinMode(motorFan,OUTPUT);
  pinMode(buzzer,OUTPUT);
  pinMode(heatLed, OUTPUT);
  pinMode(potentiometerPin, INPUT);
  pinMode(motorLed,OUTPUT);
  pinMode(dashboardLed,OUTPUT);
  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows the device to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information to receive.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  potentiometer();
      unsigned long currentMillis1 = millis();


  float hm = dht.readHumidity();
  Serial.print("Humidity ");
  Serial.println(hm);
  float temp = dht.readTemperature();
  Serial.print("Temperature ");
  Serial.println(temp);
  humidity = hm;
  temperature = temp;
  String message = "Temperature = " + String (temperature) + "  Humidity = " + String(humidity);
  if (timer.isActive()) {
   // whenever the job is "active", turn on the LED
   if (currentMillis1 - previousMillis1 >= interval){
    // save the last time you blinked the LED
    previousMillis1 = currentMillis1;

    // if the LED is off turn it on and vice-versa:
    if (ledState1 == LOW) {
      ledState1 = HIGH;
    } else {
      ledState1 = LOW;
    }

    // set the LED with the ledState of the variable:
    digitalWrite(dashboardLed, ledState1);
   
     }
} else {
   // whenever the job is "not active", turn off the LED
   digitalWrite(dashboardLed, LOW);  
}

if (eveningTimer.isActive()) {
   // whenever the job is "active", turn on the LED
     // whenever the job is "active", turn on the LED
   if (currentMillis1 - previousMillis1 >= interval){
    // save the last time you blinked the LED
    previousMillis1 = currentMillis1;

    // if the LED is off turn it on and vice-versa:
    if (ledState1 == LOW) {
      ledState1 = HIGH;
    } else {
      ledState1 = LOW;
    }

    // set the LED with the ledState of the variable:
    digitalWrite(dashboardLed, ledState1);
   }  
} else {
   // whenever the job is "not active", turn off the LED
   digitalWrite(dashboardLed, LOW);  
}

}

/*
  Since Humidity is READ_WRITE variable, onHumidityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumidityChange()  {
  
}
/*
  Since Msg is READ_WRITE variable, onMsgChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMessageChange()  {
  
}

void dht_sensor_getdata()
{
  float hm = dht.readHumidity();
  Serial.print("Humidity ");
  Serial.println(hm);
  float temp = dht.readTemperature();
  Serial.print("Temperature ");
  Serial.println(temp);
  humidity = hm;
  temperature = temp;
 // message = "Temperature = " + String (temperature) + "  Humidity = " + String(humidity);
}


/*
  Since Msg is READ_WRITE variable, onMsgChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMsgChange()  {
  
}




/*
  Since Led is READ_WRITE variable, onLedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedChange()  {
  
  // if (led == 1){
  //   digitalWrite(dashboardLed,HIGH);
  //   Serial.println("onnnnnnnnnnnnn");
  // }
  // else{
  //   digitalWrite(dashboardLed,LOW);
  // }
  
}

void potentiometer(){
    unsigned long currentMillis = millis();

  int value = analogRead(potentiometerPin);
  int val = map(value, 0, 1023, 0, 40);
   Serial.print("potValue      ");
  Serial.println(pot);
  if (pot<18){
    digitalWrite(heatLed,HIGH);
  }  
  else{
    digitalWrite(heatLed,LOW);
  }
  if (pot>25){
     digitalWrite(motorFan,HIGH);
     if (currentMillis - previousMillis >= interval){
    // saves the last time you blinked the LED
    previousMillis = currentMillis;

    // if the LED is off turn it on and vice-versa:
    if (ledState == LOW) {
      ledState = HIGH;
    } else {
      ledState = LOW;
    }

    // set the LED with the ledState of the variable:
    digitalWrite(motorLed, ledState);
    digitalWrite(buzzer, ledState);
     }
  }
  else{
     digitalWrite(motorFan,LOW);
    digitalWrite(motorLed,LOW);
        digitalWrite(buzzer,LOW);

  }
  // pot = val;
  // delay(500);

}


/*
  Since Pot is READ_WRITE variable, onPotChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPotChange()  {
  
}


/*
  Since Fan is READ_WRITE variable, onFanChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFanChange()  {
  // Add your code here to act upon Fan change
  // if (fan == 1){
  //   digitalWrite(motorFan,HIGH);
  //   Serial.println("Fan onnnnnnnnnnnnn");
  // }
  // else{
  //   digitalWrite(motorFan,LOW);
  // }
  
}

/*
  Since Timer is READ_WRITE variable, onTimerChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTimerChange()  {
  // 
}

/*
  Since EveningTimer is READ_WRITE variable, onEveningTimerChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onEveningTimerChange()  {
  // 
}